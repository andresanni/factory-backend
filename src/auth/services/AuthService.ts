import { handleError } from "../../utils/errorHandlerUtil";
import { UserRepository } from "../repositories/UserRepository";
import { RoleRepository } from "../repositories/RoleRepository";
import { AppError, ErrorLayer } from "../../errors/AppError";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

export class AuthService {
  private userRepository: UserRepository;
  private roleRepository: RoleRepository;

  constructor(userRepository: UserRepository, roleRepository: RoleRepository) {
    this.userRepository = userRepository;
    this.roleRepository = roleRepository;
  }

  async login(username: string, password: string): Promise<string> {
    const statusCode = { value: 500 };
    let publicMessage;

    try {
      const user = await this.userRepository.findByUsername(username);
      if (!user) {
        statusCode.value = 401;
        publicMessage = "Invalid username or password";
        throw new Error("User Not Found");
      }
      const passwordMatch = await bcrypt.compare(password, user.passwordHash);
      if (!passwordMatch) {
        statusCode.value = 401;
        publicMessage = "Invalid username or password";
        throw new Error("Invalid Password");
      }

      const role = await this.roleRepository.findById(user.role.id!, [
        "permissions",
      ]);

      if (!role) {
        statusCode.value = 401;
        //public message generated by handleError is enough
        throw new Error("Role Not Found");
      }

      const permissions: string[] =
        role.permissions?.map((permission) => permission.description) || [];

      const token = jwt.sign(
        { id: user.id, username: user.username, permissions: permissions },
        process.env.JWT_SECRET!,
        {
          expiresIn: "15m",
        }
      );
      return token;
    } catch (error) {
      if (error instanceof AppError) {
        throw error;
      }
      handleError(
        "logging in",
        "login()",
        error,
        statusCode.value,
        ErrorLayer.SERVICE,
        "AuthService",
        {
          publicMessage,
        }
      );
    }
  }
}
